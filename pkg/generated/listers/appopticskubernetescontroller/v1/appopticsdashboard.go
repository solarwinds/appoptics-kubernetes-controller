/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/solarwinds/appoptics-kubernetes-controller/pkg/apis/appopticskubernetescontroller/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AppOpticsDashboardLister helps list AppOpticsDashboards.
// All objects returned here must be treated as read-only.
type AppOpticsDashboardLister interface {
	// List lists all AppOpticsDashboards in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.AppOpticsDashboard, err error)
	// AppOpticsDashboards returns an object that can list and get AppOpticsDashboards.
	AppOpticsDashboards(namespace string) AppOpticsDashboardNamespaceLister
	AppOpticsDashboardListerExpansion
}

// appOpticsDashboardLister implements the AppOpticsDashboardLister interface.
type appOpticsDashboardLister struct {
	indexer cache.Indexer
}

// NewAppOpticsDashboardLister returns a new AppOpticsDashboardLister.
func NewAppOpticsDashboardLister(indexer cache.Indexer) AppOpticsDashboardLister {
	return &appOpticsDashboardLister{indexer: indexer}
}

// List lists all AppOpticsDashboards in the indexer.
func (s *appOpticsDashboardLister) List(selector labels.Selector) (ret []*v1.AppOpticsDashboard, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.AppOpticsDashboard))
	})
	return ret, err
}

// AppOpticsDashboards returns an object that can list and get AppOpticsDashboards.
func (s *appOpticsDashboardLister) AppOpticsDashboards(namespace string) AppOpticsDashboardNamespaceLister {
	return appOpticsDashboardNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AppOpticsDashboardNamespaceLister helps list and get AppOpticsDashboards.
// All objects returned here must be treated as read-only.
type AppOpticsDashboardNamespaceLister interface {
	// List lists all AppOpticsDashboards in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.AppOpticsDashboard, err error)
	// Get retrieves the AppOpticsDashboard from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.AppOpticsDashboard, error)
	AppOpticsDashboardNamespaceListerExpansion
}

// appOpticsDashboardNamespaceLister implements the AppOpticsDashboardNamespaceLister
// interface.
type appOpticsDashboardNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AppOpticsDashboards in the indexer for a given namespace.
func (s appOpticsDashboardNamespaceLister) List(selector labels.Selector) (ret []*v1.AppOpticsDashboard, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.AppOpticsDashboard))
	})
	return ret, err
}

// Get retrieves the AppOpticsDashboard from the indexer for a given namespace and name.
func (s appOpticsDashboardNamespaceLister) Get(name string) (*v1.AppOpticsDashboard, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("appopticsdashboard"), name)
	}
	return obj.(*v1.AppOpticsDashboard), nil
}
