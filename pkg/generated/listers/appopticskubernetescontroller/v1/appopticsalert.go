/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/solarwinds/appoptics-kubernetes-controller/pkg/apis/appopticskubernetescontroller/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AppOpticsAlertLister helps list AppOpticsAlerts.
// All objects returned here must be treated as read-only.
type AppOpticsAlertLister interface {
	// List lists all AppOpticsAlerts in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.AppOpticsAlert, err error)
	// AppOpticsAlerts returns an object that can list and get AppOpticsAlerts.
	AppOpticsAlerts(namespace string) AppOpticsAlertNamespaceLister
	AppOpticsAlertListerExpansion
}

// appOpticsAlertLister implements the AppOpticsAlertLister interface.
type appOpticsAlertLister struct {
	indexer cache.Indexer
}

// NewAppOpticsAlertLister returns a new AppOpticsAlertLister.
func NewAppOpticsAlertLister(indexer cache.Indexer) AppOpticsAlertLister {
	return &appOpticsAlertLister{indexer: indexer}
}

// List lists all AppOpticsAlerts in the indexer.
func (s *appOpticsAlertLister) List(selector labels.Selector) (ret []*v1.AppOpticsAlert, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.AppOpticsAlert))
	})
	return ret, err
}

// AppOpticsAlerts returns an object that can list and get AppOpticsAlerts.
func (s *appOpticsAlertLister) AppOpticsAlerts(namespace string) AppOpticsAlertNamespaceLister {
	return appOpticsAlertNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AppOpticsAlertNamespaceLister helps list and get AppOpticsAlerts.
// All objects returned here must be treated as read-only.
type AppOpticsAlertNamespaceLister interface {
	// List lists all AppOpticsAlerts in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.AppOpticsAlert, err error)
	// Get retrieves the AppOpticsAlert from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.AppOpticsAlert, error)
	AppOpticsAlertNamespaceListerExpansion
}

// appOpticsAlertNamespaceLister implements the AppOpticsAlertNamespaceLister
// interface.
type appOpticsAlertNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AppOpticsAlerts in the indexer for a given namespace.
func (s appOpticsAlertNamespaceLister) List(selector labels.Selector) (ret []*v1.AppOpticsAlert, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.AppOpticsAlert))
	})
	return ret, err
}

// Get retrieves the AppOpticsAlert from the indexer for a given namespace and name.
func (s appOpticsAlertNamespaceLister) Get(name string) (*v1.AppOpticsAlert, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("appopticsalert"), name)
	}
	return obj.(*v1.AppOpticsAlert), nil
}
